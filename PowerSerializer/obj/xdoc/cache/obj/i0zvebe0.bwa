id: DouglasDwyer.PowerSerializer
language: CSharp
name:
  Default: DouglasDwyer.PowerSerializer
qualifiedName:
  Default: DouglasDwyer.PowerSerializer
type: Assembly
modifiers: {}
items:
- id: DouglasDwyer.PowerSerializer
  commentId: N:DouglasDwyer.PowerSerializer
  language: CSharp
  name:
    CSharp: DouglasDwyer.PowerSerializer
    VB: DouglasDwyer.PowerSerializer
  nameWithType:
    CSharp: DouglasDwyer.PowerSerializer
    VB: DouglasDwyer.PowerSerializer
  qualifiedName:
    CSharp: DouglasDwyer.PowerSerializer
    VB: DouglasDwyer.PowerSerializer
  type: Namespace
  assemblies:
  - DouglasDwyer.PowerSerializer
  modifiers: {}
  items:
  - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
    language: CSharp
    name:
      CSharp: ClassLimitedTypeResolver
      VB: ClassLimitedTypeResolver
    nameWithType:
      CSharp: ClassLimitedTypeResolver
      VB: ClassLimitedTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
      VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/ClassLimitedTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: ClassLimitedTypeResolver
      path: ../PowerSerializer/ClassLimitedTypeResolver.cs
      startLine: 10
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> allow for serialization of all the classes specified in the constructor, as well as all structs loaded at resolver construction. They utilize the MD5 hash of a type&apos;s name in order to resolve it across serialization boundaries.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ClassLimitedTypeResolver : GuidTypeResolver, ITypeResolver'
        VB: >-
          Public Class ClassLimitedTypeResolver

              Inherits GuidTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    - DouglasDwyer.PowerSerializer.GuidTypeResolver
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor
      language: CSharp
      name:
        CSharp: ClassLimitedTypeResolver()
        VB: ClassLimitedTypeResolver()
      nameWithType:
        CSharp: ClassLimitedTypeResolver.ClassLimitedTypeResolver()
        VB: ClassLimitedTypeResolver.ClassLimitedTypeResolver()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver()
        VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ClassLimitedTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/ClassLimitedTypeResolver.cs
        startLine: 15
      summary: "\nCreates a new resolver instance, allowing all currently-loaded classes in the current assembly to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public ClassLimitedTypeResolver()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Reflection.Assembly[])
      commentId: M:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Reflection.Assembly[])
      language: CSharp
      name:
        CSharp: ClassLimitedTypeResolver(Assembly[])
        VB: ClassLimitedTypeResolver(Assembly())
      nameWithType:
        CSharp: ClassLimitedTypeResolver.ClassLimitedTypeResolver(Assembly[])
        VB: ClassLimitedTypeResolver.ClassLimitedTypeResolver(Assembly())
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Reflection.Assembly[])
        VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Reflection.Assembly())
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ClassLimitedTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/ClassLimitedTypeResolver.cs
        startLine: 19
      summary: "\nCreates a new resolver instance, allowing all currently-loaded classes in the given assemblies to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public ClassLimitedTypeResolver(params Assembly[] assemblies)
          VB: Public Sub New(ParamArray assemblies As Assembly())
        parameters:
        - id: assemblies
          type: System.Reflection.Assembly[]
      overload: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
      commentId: M:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
      language: CSharp
      name:
        CSharp: ClassLimitedTypeResolver(IEnumerable<Assembly>)
        VB: ClassLimitedTypeResolver(IEnumerable(Of Assembly))
      nameWithType:
        CSharp: ClassLimitedTypeResolver.ClassLimitedTypeResolver(IEnumerable<Assembly>)
        VB: ClassLimitedTypeResolver.ClassLimitedTypeResolver(IEnumerable(Of Assembly))
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Collections.Generic.IEnumerable<System.Reflection.Assembly>)
        VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Collections.Generic.IEnumerable(Of System.Reflection.Assembly))
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ClassLimitedTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/ClassLimitedTypeResolver.cs
        startLine: 23
      summary: "\nCreates a new resolver instance, allowing all currently-loaded classes in the given assemblies to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public ClassLimitedTypeResolver(IEnumerable<Assembly> assemblies)
          VB: Public Sub New(assemblies As IEnumerable(Of Assembly))
        parameters:
        - id: assemblies
          type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      overload: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Type[])
      commentId: M:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Type[])
      language: CSharp
      name:
        CSharp: ClassLimitedTypeResolver(Type[])
        VB: ClassLimitedTypeResolver(Type())
      nameWithType:
        CSharp: ClassLimitedTypeResolver.ClassLimitedTypeResolver(Type[])
        VB: ClassLimitedTypeResolver.ClassLimitedTypeResolver(Type())
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Type[])
        VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Type())
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ClassLimitedTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/ClassLimitedTypeResolver.cs
        startLine: 27
      summary: "\nCreates a new resolver instance, allowing all of the given classes to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public ClassLimitedTypeResolver(params Type[] types)
          VB: Public Sub New(ParamArray types As Type())
        parameters:
        - id: types
          type: System.Type[]
      overload: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})
      commentId: M:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})
      language: CSharp
      name:
        CSharp: ClassLimitedTypeResolver(IEnumerable<Type>)
        VB: ClassLimitedTypeResolver(IEnumerable(Of Type))
      nameWithType:
        CSharp: ClassLimitedTypeResolver.ClassLimitedTypeResolver(IEnumerable<Type>)
        VB: ClassLimitedTypeResolver.ClassLimitedTypeResolver(IEnumerable(Of Type))
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Collections.Generic.IEnumerable<System.Type>)
        VB: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver(System.Collections.Generic.IEnumerable(Of System.Type))
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ClassLimitedTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/ClassLimitedTypeResolver.cs
        startLine: 31
      summary: "\nCreates a new resolver instance, allowing all of the given classes to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public ClassLimitedTypeResolver(IEnumerable<Type> types)
          VB: Public Sub New(types As IEnumerable(Of Type))
        parameters:
        - id: types
          type: System.Collections.Generic.IEnumerable{System.Type}
      overload: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver: 
  - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
    language: CSharp
    name:
      CSharp: FinalizerLimitedGuidTypeResolver
      VB: FinalizerLimitedGuidTypeResolver
    nameWithType:
      CSharp: FinalizerLimitedGuidTypeResolver
      VB: FinalizerLimitedGuidTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
      VB: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/FinalizerLimitedGuidTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: FinalizerLimitedGuidTypeResolver
      path: ../PowerSerializer/FinalizerLimitedGuidTypeResolver.cs
      startLine: 9
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> allow for serialization of any type loaded in the current <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref> upon resolver construction, provided that the type doesn&apos;t have a finalizer. They utilize the MD5 hash of a type&apos;s name in order to resolve it across serialization boundaries.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FinalizerLimitedGuidTypeResolver : GuidTypeResolver, ITypeResolver'
        VB: >-
          Public Class FinalizerLimitedGuidTypeResolver

              Inherits GuidTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    - DouglasDwyer.PowerSerializer.GuidTypeResolver
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor
      language: CSharp
      name:
        CSharp: FinalizerLimitedGuidTypeResolver()
        VB: FinalizerLimitedGuidTypeResolver()
      nameWithType:
        CSharp: FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver()
        VB: FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver()
        VB: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/FinalizerLimitedGuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/FinalizerLimitedGuidTypeResolver.cs
        startLine: 14
      summary: "\nCreates a new resolver instance, allowing all currently-loaded types without a finalizer to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public FinalizerLimitedGuidTypeResolver()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver: 
      System.AppDomain: 
  - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
    language: CSharp
    name:
      CSharp: FinalizerLimitedNameTypeResolver
      VB: FinalizerLimitedNameTypeResolver
    nameWithType:
      CSharp: FinalizerLimitedNameTypeResolver
      VB: FinalizerLimitedNameTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
      VB: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/FinalizerLimitedNameTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: FinalizerLimitedNameTypeResolver
      path: ../PowerSerializer/FinalizerLimitedNameTypeResolver.cs
      startLine: 10
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> allow for serialization of any type loaded in the current <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref> upon resolver construction, provided that the type doesn&apos;t have a finalizer. They utilize the a type&apos;s assembly-qualified name in order to resolve it across serialization boundaries.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FinalizerLimitedNameTypeResolver : NameTypeResolver, ITypeResolver'
        VB: >-
          Public Class FinalizerLimitedNameTypeResolver

              Inherits NameTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    - DouglasDwyer.PowerSerializer.NameTypeResolver
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
    - DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable(System.Type)
      language: CSharp
      name:
        CSharp: IsTypeSerializable(Type)
        VB: IsTypeSerializable(Type)
      nameWithType:
        CSharp: FinalizerLimitedNameTypeResolver.IsTypeSerializable(Type)
        VB: FinalizerLimitedNameTypeResolver.IsTypeSerializable(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable(System.Type)
        VB: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/FinalizerLimitedNameTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IsTypeSerializable
        path: ../PowerSerializer/FinalizerLimitedNameTypeResolver.cs
        startLine: 17
      summary: "\nReturns whether the given type should be serialized or deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool IsTypeSerializable(Type type)
          VB: Public Overrides Function IsTypeSerializable(type As Type) As Boolean
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.Boolean
          description: Whether the type is serializable.
      overload: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable*
      overridden: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    references:
      DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver: 
      System.AppDomain: 
  - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.FullGuidTypeResolver
    language: CSharp
    name:
      CSharp: FullGuidTypeResolver
      VB: FullGuidTypeResolver
    nameWithType:
      CSharp: FullGuidTypeResolver
      VB: FullGuidTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
      VB: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/FullGuidTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: FullGuidTypeResolver
      path: ../PowerSerializer/FullGuidTypeResolver.cs
      startLine: 10
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.FullGuidTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> allow for serialization of any and all types loaded in the current <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref> upon resolver construction. They utilize the MD5 hash of a type&apos;s name in order to resolve it across serialization boundaries.\n"
    remarks: Allowing deserialization of all types is dangerous unless the data to be deserialized is fully trusted. Attackers can submit deserialization payloads that generate objects in invalid states, or objects that may cause unwanted code execution during their finalization routines. Consider using a <xref href="DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver" data-throw-if-not-resolved="false"></xref> or <xref href="DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver" data-throw-if-not-resolved="false"></xref> instead to minimize security risks.
    example: []
    syntax:
      content:
        CSharp: >-
          [Obsolete("Allowing deserialization of all types is dangerous unless the data to be deserialized is fully trusted. Attackers can submit deserialization payloads that generate objects in invalid states, or objects that may cause unwanted code execution during their finalization routines. Consider using a class-limited or finalizer-limited serializer instead to minimize security risks.", false)]

          public class FullGuidTypeResolver : GuidTypeResolver, ITypeResolver
        VB: >-
          <Obsolete("Allowing deserialization of all types is dangerous unless the data to be deserialized is fully trusted. Attackers can submit deserialization payloads that generate objects in invalid states, or objects that may cause unwanted code execution during their finalization routines. Consider using a class-limited or finalizer-limited serializer instead to minimize security risks.", False)>

          Public Class FullGuidTypeResolver

              Inherits GuidTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    - DouglasDwyer.PowerSerializer.GuidTypeResolver
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
    - DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.ObsoleteAttribute
      ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
      arguments:
      - type: System.String
        value: Allowing deserialization of all types is dangerous unless the data to be deserialized is fully trusted. Attackers can submit deserialization payloads that generate objects in invalid states, or objects that may cause unwanted code execution during their finalization routines. Consider using a class-limited or finalizer-limited serializer instead to minimize security risks.
      - type: System.Boolean
        value: false
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor
      language: CSharp
      name:
        CSharp: FullGuidTypeResolver()
        VB: FullGuidTypeResolver()
      nameWithType:
        CSharp: FullGuidTypeResolver.FullGuidTypeResolver()
        VB: FullGuidTypeResolver.FullGuidTypeResolver()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.FullGuidTypeResolver()
        VB: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.FullGuidTypeResolver()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/FullGuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/FullGuidTypeResolver.cs
        startLine: 16
      summary: "\nCreates a new resolver instance, allowing all types currently loaded in the <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref> to be serialized.\n"
      example: []
      syntax:
        content:
          CSharp: public FullGuidTypeResolver()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.AppDomain: 
    references:
      DouglasDwyer.PowerSerializer.FullGuidTypeResolver: 
      System.AppDomain: 
      DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver: 
      DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver: 
  - id: DouglasDwyer.PowerSerializer.GuidTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.GuidTypeResolver
    language: CSharp
    name:
      CSharp: GuidTypeResolver
      VB: GuidTypeResolver
    nameWithType:
      CSharp: GuidTypeResolver
      VB: GuidTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver
      VB: DouglasDwyer.PowerSerializer.GuidTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/GuidTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: GuidTypeResolver
      path: ../PowerSerializer/GuidTypeResolver.cs
      startLine: 13
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.GuidTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> utilize the MD5 hash of a type&apos;s name in order to resolve it across serialization boundaries. They allow for serialization of any type specified in the constructor.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GuidTypeResolver : ITypeResolver'
        VB: >-
          Public Class GuidTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})
      commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})
      language: CSharp
      name:
        CSharp: GuidTypeResolver(IEnumerable<Type>)
        VB: GuidTypeResolver(IEnumerable(Of Type))
      nameWithType:
        CSharp: GuidTypeResolver.GuidTypeResolver(IEnumerable<Type>)
        VB: GuidTypeResolver.GuidTypeResolver(IEnumerable(Of Type))
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver.GuidTypeResolver(System.Collections.Generic.IEnumerable<System.Type>)
        VB: DouglasDwyer.PowerSerializer.GuidTypeResolver.GuidTypeResolver(System.Collections.Generic.IEnumerable(Of System.Type))
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/GuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/GuidTypeResolver.cs
        startLine: 23
      summary: "\nCreates a new resolver instance with the given type list. The resolver will only allow serialization of those specified types.\n"
      example: []
      syntax:
        content:
          CSharp: public GuidTypeResolver(IEnumerable<Type> allowedTypes)
          VB: Public Sub New(allowedTypes As IEnumerable(Of Type))
        parameters:
        - id: allowedTypes
          type: System.Collections.Generic.IEnumerable{System.Type}
          description: The types to allow during serialization.
      overload: DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
      language: CSharp
      name:
        CSharp: IsTypeSerializable(Type)
        VB: IsTypeSerializable(Type)
      nameWithType:
        CSharp: GuidTypeResolver.IsTypeSerializable(Type)
        VB: GuidTypeResolver.IsTypeSerializable(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
        VB: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/GuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IsTypeSerializable
        path: ../PowerSerializer/GuidTypeResolver.cs
        startLine: 34
      summary: "\nReturns whether the given type should be serialized or deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual bool IsTypeSerializable(Type type)
          VB: Public Overridable Function IsTypeSerializable(type As Type) As Boolean
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.Boolean
          description: Whether the type is serializable.
      overload: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      language: CSharp
      name:
        CSharp: WriteTypeID(BinaryWriter, Type)
        VB: WriteTypeID(BinaryWriter, Type)
      nameWithType:
        CSharp: GuidTypeResolver.WriteTypeID(BinaryWriter, Type)
        VB: GuidTypeResolver.WriteTypeID(BinaryWriter, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
        VB: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/GuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: WriteTypeID
        path: ../PowerSerializer/GuidTypeResolver.cs
        startLine: 55
      summary: "\nWrites a binary representation of the given type&apos;s identity to the given binary writer&apos;s stream.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void WriteTypeID(BinaryWriter writer, Type type)
          VB: Public Overridable Sub WriteTypeID(writer As BinaryWriter, type As Type)
        parameters:
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: type
          type: System.Type
          description: The type whose ID should be written.
      overload: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
      commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
      language: CSharp
      name:
        CSharp: ReadTypeID(BinaryReader)
        VB: ReadTypeID(BinaryReader)
      nameWithType:
        CSharp: GuidTypeResolver.ReadTypeID(BinaryReader)
        VB: GuidTypeResolver.ReadTypeID(BinaryReader)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
        VB: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/GuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadTypeID
        path: ../PowerSerializer/GuidTypeResolver.cs
        startLine: 80
      summary: "\nReads the binary representation of a type&apos;s identity from the given binary reader&apos;s stream and returns the type.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Type ReadTypeID(BinaryReader reader)
          VB: Public Overridable Function ReadTypeID(reader As BinaryReader) As Type
        parameters:
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader from which to read.
        return:
          type: System.Type
          description: The type whose ID was written to the reader&apos;s stream.
      overload: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
      language: CSharp
      name:
        CSharp: GetTypeName(Type)
        VB: GetTypeName(Type)
      nameWithType:
        CSharp: GuidTypeResolver.GetTypeName(Type)
        VB: GuidTypeResolver.GetTypeName(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
        VB: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/GuidTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: GetTypeName
        path: ../PowerSerializer/GuidTypeResolver.cs
        startLine: 110
      summary: "\nReturns a string identifying the given type. By default, this returns the assembly-qualified name, but this can be overriden to allow for serialization between different assemblies.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual string GetTypeName(Type type)
          VB: Protected Overridable Function GetTypeName(type As Type) As String
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.String
          description: A name that uniquely identifies the type.
      overload: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    references:
      DouglasDwyer.PowerSerializer.GuidTypeResolver: 
  - id: DouglasDwyer.PowerSerializer.ITypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.ITypeResolver
    language: CSharp
    name:
      CSharp: ITypeResolver
      VB: ITypeResolver
    nameWithType:
      CSharp: ITypeResolver
      VB: ITypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.ITypeResolver
      VB: DouglasDwyer.PowerSerializer.ITypeResolver
    type: Interface
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/ITypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: ITypeResolver
      path: ../PowerSerializer/ITypeResolver.cs
      startLine: 10
    summary: "\nTypes that implement <xref href=\"DouglasDwyer.PowerSerializer.ITypeResolver\" data-throw-if-not-resolved=\"false\"></xref> mediate which types can be serialized/deserialized by a <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer\" data-throw-if-not-resolved=\"false\"></xref>. Additionally, they each provide a way to identify types across serialization boundaries.\n"
    example: []
    syntax:
      content:
        CSharp: public interface ITypeResolver
        VB: Public Interface ITypeResolver
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
      language: CSharp
      name:
        CSharp: IsTypeSerializable(Type)
        VB: IsTypeSerializable(Type)
      nameWithType:
        CSharp: ITypeResolver.IsTypeSerializable(Type)
        VB: ITypeResolver.IsTypeSerializable(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
        VB: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ITypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IsTypeSerializable
        path: ../PowerSerializer/ITypeResolver.cs
        startLine: 17
      summary: "\nReturns whether the given type should be serialized or deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: bool IsTypeSerializable(Type type)
          VB: Function IsTypeSerializable(type As Type) As Boolean
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.Boolean
          description: Whether the type is serializable.
      overload: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      language: CSharp
      name:
        CSharp: WriteTypeID(BinaryWriter, Type)
        VB: WriteTypeID(BinaryWriter, Type)
      nameWithType:
        CSharp: ITypeResolver.WriteTypeID(BinaryWriter, Type)
        VB: ITypeResolver.WriteTypeID(BinaryWriter, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
        VB: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ITypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: WriteTypeID
        path: ../PowerSerializer/ITypeResolver.cs
        startLine: 23
      summary: "\nWrites a binary representation of the given type&apos;s identity to the given binary writer&apos;s stream.\n"
      example: []
      syntax:
        content:
          CSharp: void WriteTypeID(BinaryWriter writer, Type type)
          VB: Sub WriteTypeID(writer As BinaryWriter, type As Type)
        parameters:
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: type
          type: System.Type
          description: The type whose ID should be written.
      overload: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID*
      modifiers:
        CSharp: []
        VB: []
    - id: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
      commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
      language: CSharp
      name:
        CSharp: ReadTypeID(BinaryReader)
        VB: ReadTypeID(BinaryReader)
      nameWithType:
        CSharp: ITypeResolver.ReadTypeID(BinaryReader)
        VB: ITypeResolver.ReadTypeID(BinaryReader)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
        VB: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/ITypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadTypeID
        path: ../PowerSerializer/ITypeResolver.cs
        startLine: 29
      summary: "\nReads the binary representation of a type&apos;s identity from the given binary reader&apos;s stream and returns the type.\n"
      example: []
      syntax:
        content:
          CSharp: Type ReadTypeID(BinaryReader reader)
          VB: Function ReadTypeID(reader As BinaryReader) As Type
        parameters:
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader from which to read.
        return:
          type: System.Type
          description: The type whose ID was written to the reader&apos;s stream.
      overload: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID*
      modifiers:
        CSharp: []
        VB: []
    references:
      DouglasDwyer.PowerSerializer.ITypeResolver: 
      DouglasDwyer.PowerSerializer.PowerSerializer: 
  - id: DouglasDwyer.PowerSerializer.NameTypeResolver
    commentId: T:DouglasDwyer.PowerSerializer.NameTypeResolver
    language: CSharp
    name:
      CSharp: NameTypeResolver
      VB: NameTypeResolver
    nameWithType:
      CSharp: NameTypeResolver
      VB: NameTypeResolver
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.NameTypeResolver
      VB: DouglasDwyer.PowerSerializer.NameTypeResolver
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/NameTypeResolver.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: NameTypeResolver
      path: ../PowerSerializer/NameTypeResolver.cs
      startLine: 10
    summary: "\nInstances of <xref href=\"DouglasDwyer.PowerSerializer.NameTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> utilize the a type&apos;s assembly-qualified name in order to resolve it across serialization boundaries. They allow for serialization of all types.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class NameTypeResolver : ITypeResolver'
        VB: >-
          Public Class NameTypeResolver

              Implements ITypeResolver
    inheritance:
    - System.Object
    implements:
    - DouglasDwyer.PowerSerializer.ITypeResolver
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
      language: CSharp
      name:
        CSharp: IsTypeSerializable(Type)
        VB: IsTypeSerializable(Type)
      nameWithType:
        CSharp: NameTypeResolver.IsTypeSerializable(Type)
        VB: NameTypeResolver.IsTypeSerializable(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
        VB: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/NameTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IsTypeSerializable
        path: ../PowerSerializer/NameTypeResolver.cs
        startLine: 17
      summary: "\nReturns whether the given type should be serialized or deserialized.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual bool IsTypeSerializable(Type type)
          VB: Public Overridable Function IsTypeSerializable(type As Type) As Boolean
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.Boolean
          description: Whether the type is serializable.
      overload: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
      commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
      language: CSharp
      name:
        CSharp: ReadTypeID(BinaryReader)
        VB: ReadTypeID(BinaryReader)
      nameWithType:
        CSharp: NameTypeResolver.ReadTypeID(BinaryReader)
        VB: NameTypeResolver.ReadTypeID(BinaryReader)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
        VB: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/NameTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadTypeID
        path: ../PowerSerializer/NameTypeResolver.cs
        startLine: 27
      summary: "\nReads the binary representation of a type&apos;s identity from the given binary reader&apos;s stream and returns the type.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual Type ReadTypeID(BinaryReader reader)
          VB: Public Overridable Function ReadTypeID(reader As BinaryReader) As Type
        parameters:
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader from which to read.
        return:
          type: System.Type
          description: The type whose ID was written to the reader&apos;s stream.
      overload: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      language: CSharp
      name:
        CSharp: WriteTypeID(BinaryWriter, Type)
        VB: WriteTypeID(BinaryWriter, Type)
      nameWithType:
        CSharp: NameTypeResolver.WriteTypeID(BinaryWriter, Type)
        VB: NameTypeResolver.WriteTypeID(BinaryWriter, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
        VB: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/NameTypeResolver.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: WriteTypeID
        path: ../PowerSerializer/NameTypeResolver.cs
        startLine: 37
      summary: "\nWrites a binary representation of the given type&apos;s identity to the given binary writer&apos;s stream.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual void WriteTypeID(BinaryWriter writer, Type type)
          VB: Public Overridable Sub WriteTypeID(writer As BinaryWriter, type As Type)
        parameters:
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: type
          type: System.Type
          description: The type whose ID should be written.
      overload: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID*
      implements:
      - DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    references:
      DouglasDwyer.PowerSerializer.NameTypeResolver: 
  - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
    commentId: T:DouglasDwyer.PowerSerializer.PowerDeserializationContext
    language: CSharp
    name:
      CSharp: PowerDeserializationContext
      VB: PowerDeserializationContext
    nameWithType:
      CSharp: PowerDeserializationContext
      VB: PowerDeserializationContext
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext
      VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/PowerDeserializationContext.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: PowerDeserializationContext
      path: ../PowerSerializer/PowerDeserializationContext.cs
      startLine: 9
    summary: "\nStores data about a <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer\" data-throw-if-not-resolved=\"false\"></xref>&apos;s deserialization operation, including a list of serialized types as well as the current object graph. This class, along with <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext\" data-throw-if-not-resolved=\"false\"></xref>, may be overriden to store additional information.\n"
    example: []
    syntax:
      content:
        CSharp: public class PowerDeserializationContext
        VB: Public Class PowerDeserializationContext
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
      commentId: P:DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
      language: CSharp
      name:
        CSharp: ObjectGraph
        VB: ObjectGraph
      nameWithType:
        CSharp: PowerDeserializationContext.ObjectGraph
        VB: PowerDeserializationContext.ObjectGraph
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
      type: Property
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ObjectGraph
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 14
      summary: "\nA list of the currently-known heap-based objects being deserialized. This list is updated as additional objects are deserialized. It does not contain value types that exist as part of a reference type&apos;s data; structs will only appear in this list if they are boxed as objects.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<object> ObjectGraph { get; }
          VB: Public ReadOnly Property ObjectGraph As IList(Of Object)
        parameters: []
        return:
          type: System.Collections.Generic.IList{System.Object}
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
      commentId: P:DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
      language: CSharp
      name:
        CSharp: IncludedTypes
        VB: IncludedTypes
      nameWithType:
        CSharp: PowerDeserializationContext.IncludedTypes
        VB: PowerDeserializationContext.IncludedTypes
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
      type: Property
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IncludedTypes
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 18
      summary: "\nA list of all the types included in deserialization. It does not contain value types that exist as part of a reference type&apos;s data; struct types will only appear in this list if their instances are boxed as objects.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<Type> IncludedTypes { get; set; }
          VB: Public Property IncludedTypes As IList(Of Type)
        parameters: []
        return:
          type: System.Collections.Generic.IList{System.Type}
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor
      language: CSharp
      name:
        CSharp: PowerDeserializationContext()
        VB: PowerDeserializationContext()
      nameWithType:
        CSharp: PowerDeserializationContext.PowerDeserializationContext()
        VB: PowerDeserializationContext.PowerDeserializationContext()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.PowerDeserializationContext()
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.PowerDeserializationContext()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 25
      summary: "\nCreates a deserialization context for a new deserialization operation.\n"
      example: []
      syntax:
        content:
          CSharp: public PowerDeserializationContext()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID(System.UInt16)
      commentId: M:DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID(System.UInt16)
      language: CSharp
      name:
        CSharp: GetTypeFromID(UInt16)
        VB: GetTypeFromID(UInt16)
      nameWithType:
        CSharp: PowerDeserializationContext.GetTypeFromID(UInt16)
        VB: PowerDeserializationContext.GetTypeFromID(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID(System.UInt16)
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID(System.UInt16)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: GetTypeFromID
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 34
      summary: "\nGets type associated with a given ID, or throws an exception if the type isn&apos;t registered in the known types list.\n"
      example: []
      syntax:
        content:
          CSharp: public Type GetTypeFromID(ushort id)
          VB: Public Function GetTypeFromID(id As UShort) As Type
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the type to retrieve.
        return:
          type: System.Type
          description: The identified type.
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject(System.UInt16)
      commentId: M:DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject(System.UInt16)
      language: CSharp
      name:
        CSharp: HasObject(UInt16)
        VB: HasObject(UInt16)
      nameWithType:
        CSharp: PowerDeserializationContext.HasObject(UInt16)
        VB: PowerDeserializationContext.HasObject(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject(System.UInt16)
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject(System.UInt16)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: HasObject
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 44
      summary: "\nReturns whether the given object is already instantiated and registered in the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasObject(ushort id)
          VB: Public Function HasObject(id As UShort) As Boolean
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the object to check.
        return:
          type: System.Boolean
          description: Whether the object is already in the deserialization object graph.
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject(System.UInt16)
      commentId: M:DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject(System.UInt16)
      language: CSharp
      name:
        CSharp: GetObject(UInt16)
        VB: GetObject(UInt16)
      nameWithType:
        CSharp: PowerDeserializationContext.GetObject(UInt16)
        VB: PowerDeserializationContext.GetObject(UInt16)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject(System.UInt16)
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject(System.UInt16)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: GetObject
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 54
      summary: "\nReturns the object with the given reference ID, or throws an exception if the object isn&apos;t registered in the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: public object GetObject(ushort id)
          VB: Public Function GetObject(id As UShort) As Object
        parameters:
        - id: id
          type: System.UInt16
          description: The ID of the object to retrieve.
        return:
          type: System.Object
          description: The identified object.
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject(System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject(System.Object)
      language: CSharp
      name:
        CSharp: RegisterNextObject(Object)
        VB: RegisterNextObject(Object)
      nameWithType:
        CSharp: PowerDeserializationContext.RegisterNextObject(Object)
        VB: PowerDeserializationContext.RegisterNextObject(Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject(System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject(System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerDeserializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: RegisterNextObject
        path: ../PowerSerializer/PowerDeserializationContext.cs
        startLine: 63
      summary: "\nRegisters the object that has the next reference ID in the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: public void RegisterNextObject(object obj)
          VB: Public Sub RegisterNextObject(obj As Object)
        parameters:
        - id: obj
          type: System.Object
          description: The object to register.
      overload: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.PowerSerializer.PowerSerializer: 
      DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext: 
  - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializationContext
    language: CSharp
    name:
      CSharp: PowerSerializationContext
      VB: PowerSerializationContext
    nameWithType:
      CSharp: PowerSerializationContext
      VB: PowerSerializationContext
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext
      VB: DouglasDwyer.PowerSerializer.PowerSerializationContext
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/PowerSerializationContext.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: PowerSerializationContext
      path: ../PowerSerializer/PowerSerializationContext.cs
      startLine: 10
    summary: "\nStores data about a <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer\" data-throw-if-not-resolved=\"false\"></xref>&apos;s serialization operation, including a list of serialized types as well as the current object graph. This class, along with <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext\" data-throw-if-not-resolved=\"false\"></xref>, may be overriden to store additional information.\n"
    example: []
    syntax:
      content:
        CSharp: public class PowerSerializationContext
        VB: Public Class PowerSerializationContext
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
      commentId: P:DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
      language: CSharp
      name:
        CSharp: ObjectGraph
        VB: ObjectGraph
      nameWithType:
        CSharp: PowerSerializationContext.ObjectGraph
        VB: PowerSerializationContext.ObjectGraph
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
      type: Property
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ObjectGraph
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 15
      summary: "\nA list the currently-known heap-based objects being serialized. This list is updated as additional objects are serialized. It does not contain value types that exist as part of a reference type&apos;s data; structs will only appear in this list if they are boxed as objects.\n"
      example: []
      syntax:
        content:
          CSharp: public IList<object> ObjectGraph { get; }
          VB: Public ReadOnly Property ObjectGraph As IList(Of Object)
        parameters: []
        return:
          type: System.Collections.Generic.IList{System.Object}
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
      commentId: P:DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
      language: CSharp
      name:
        CSharp: IncludedTypes
        VB: IncludedTypes
      nameWithType:
        CSharp: PowerSerializationContext.IncludedTypes
        VB: PowerSerializationContext.IncludedTypes
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
      type: Property
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: IncludedTypes
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 19
      summary: "\nA list of the currently-known types included in serialization. This list is updated as additional objects are serialized. It does not contain value types that exist as part of a reference type&apos;s data; struct types will only appear in this list if their instances are boxed as objects.\n"
      example: []
      syntax:
        content:
          CSharp: public ImmutableList<Type> IncludedTypes { get; }
          VB: Public ReadOnly Property IncludedTypes As ImmutableList(Of Type)
        parameters: []
        return:
          type: System.Collections.Immutable.ImmutableList{System.Type}
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor
      language: CSharp
      name:
        CSharp: PowerSerializationContext()
        VB: PowerSerializationContext()
      nameWithType:
        CSharp: PowerSerializationContext.PowerSerializationContext()
        VB: PowerSerializationContext.PowerSerializationContext()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.PowerSerializationContext()
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.PowerSerializationContext()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 28
      summary: "\nCreates a serialization context for a new serialization operation.\n"
      example: []
      syntax:
        content:
          CSharp: public PowerSerializationContext()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject(System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject(System.Object)
      language: CSharp
      name:
        CSharp: HasObject(Object)
        VB: HasObject(Object)
      nameWithType:
        CSharp: PowerSerializationContext.HasObject(Object)
        VB: PowerSerializationContext.HasObject(Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject(System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject(System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: HasObject
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 35
      summary: "\nReturns whether the given object is already registered in the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: public bool HasObject(object obj)
          VB: Public Function HasObject(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: The object to check.
        return:
          type: System.Boolean
          description: Whether the object is already in the serialization object graph.
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID(System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID(System.Object)
      language: CSharp
      name:
        CSharp: GetObjectID(Object)
        VB: GetObjectID(Object)
      nameWithType:
        CSharp: PowerSerializationContext.GetObjectID(Object)
        VB: PowerSerializationContext.GetObjectID(Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID(System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID(System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: GetObjectID
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 45
      summary: "\nReturns the reference ID of the given object, or throws an exception if the object isn&apos;t registered in the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort GetObjectID(object obj)
          VB: Public Function GetObjectID(obj As Object) As UShort
        parameters:
        - id: obj
          type: System.Object
          description: The object to examine.
        return:
          type: System.UInt16
          description: The ID of the object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject(System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject(System.Object)
      language: CSharp
      name:
        CSharp: RegisterObject(Object)
        VB: RegisterObject(Object)
      nameWithType:
        CSharp: PowerSerializationContext.RegisterObject(Object)
        VB: PowerSerializationContext.RegisterObject(Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject(System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject(System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: RegisterObject
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 55
      summary: "\nRegisters an object in the object graph and adds its type to the list of known types, returning the object&apos;s type and assigned ID.\n"
      example: []
      syntax:
        content:
          CSharp: public (ushort id, Type type) RegisterObject(object obj)
          VB: Public Function RegisterObject(obj As Object) As(id As UShort, type As Type)
        parameters:
        - id: obj
          type: System.Object
          description: The object to register.
        return:
          type: System.ValueTuple{System.UInt16,System.Type}
          description: A tuple containing the ID of the object and the type of the object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID(System.Type)
      language: CSharp
      name:
        CSharp: GetTypeID(Type)
        VB: GetTypeID(Type)
      nameWithType:
        CSharp: PowerSerializationContext.GetTypeID(Type)
        VB: PowerSerializationContext.GetTypeID(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID(System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializationContext.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: GetTypeID
        path: ../PowerSerializer/PowerSerializationContext.cs
        startLine: 76
      summary: "\nGets the ID for a given type, or throws an exception if the type isn&apos;t registered in the known types list.\n"
      example: []
      syntax:
        content:
          CSharp: public ushort GetTypeID(Type type)
          VB: Public Function GetTypeID(type As Type) As UShort
        parameters:
        - id: type
          type: System.Type
          description: The type to examine.
        return:
          type: System.UInt16
          description: The ID of the type.
      overload: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    references:
      DouglasDwyer.PowerSerializer.PowerSerializer: 
      DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext: 
  - id: DouglasDwyer.PowerSerializer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializer
    language: CSharp
    name:
      CSharp: PowerSerializer
      VB: PowerSerializer
    nameWithType:
      CSharp: PowerSerializer
      VB: PowerSerializer
    qualifiedName:
      CSharp: DouglasDwyer.PowerSerializer.PowerSerializer
      VB: DouglasDwyer.PowerSerializer.PowerSerializer
    type: Class
    assemblies:
    - DouglasDwyer.PowerSerializer
    namespace: DouglasDwyer.PowerSerializer
    source:
      remote:
        path: PowerSerializer/PowerSerializer.cs
        branch: main
        repo: https://github.com/DouglasDwyer/PowerSerializer.git
      id: PowerSerializer
      path: ../PowerSerializer/PowerSerializer.cs
      startLine: 12
    summary: "\nAllows for customizable binary serialization and deserialization of complex types. Instances of <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer\" data-throw-if-not-resolved=\"false\"></xref> can serialize absolutely anything, provided that their type resolver allows it.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class PowerSerializer : ICloneable'
        VB: >-
          Public Class PowerSerializer

              Implements ICloneable
    inheritance:
    - System.Object
    implements:
    - System.ICloneable
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
      commentId: P:DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
      language: CSharp
      name:
        CSharp: TypeResolver
        VB: TypeResolver
      nameWithType:
        CSharp: PowerSerializer.TypeResolver
        VB: PowerSerializer.TypeResolver
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
      type: Property
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: TypeResolver
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 17
      summary: "\nThe resolver used to identify/verify serialized types.\n"
      example: []
      syntax:
        content:
          CSharp: public ITypeResolver TypeResolver { get; }
          VB: Public ReadOnly Property TypeResolver As ITypeResolver
        parameters: []
        return:
          type: DouglasDwyer.PowerSerializer.ITypeResolver
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.#ctor
      language: CSharp
      name:
        CSharp: PowerSerializer()
        VB: PowerSerializer()
      nameWithType:
        CSharp: PowerSerializer.PowerSerializer()
        VB: PowerSerializer.PowerSerializer()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer()
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer()
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 22
      summary: "\nCreates a new serializer instance with a <xref href=\"DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver\" data-throw-if-not-resolved=\"false\"></xref> limited to types without finalizers.\n"
      example: []
      syntax:
        content:
          CSharp: public PowerSerializer()
          VB: Public Sub New
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver: 
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor(DouglasDwyer.PowerSerializer.ITypeResolver)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.#ctor(DouglasDwyer.PowerSerializer.ITypeResolver)
      language: CSharp
      name:
        CSharp: PowerSerializer(ITypeResolver)
        VB: PowerSerializer(ITypeResolver)
      nameWithType:
        CSharp: PowerSerializer.PowerSerializer(ITypeResolver)
        VB: PowerSerializer.PowerSerializer(ITypeResolver)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer(DouglasDwyer.PowerSerializer.ITypeResolver)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer(DouglasDwyer.PowerSerializer.ITypeResolver)
      type: Constructor
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: .ctor
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 28
      summary: "\nCreates a new serializer instance with the specified type resolver.\n"
      example: []
      syntax:
        content:
          CSharp: public PowerSerializer(ITypeResolver resolver)
          VB: Public Sub New(resolver As ITypeResolver)
        parameters:
        - id: resolver
          type: DouglasDwyer.PowerSerializer.ITypeResolver
          description: The type resolver that should be used during serialization/deseriation for identifing/verifying types.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
      language: CSharp
      name:
        CSharp: Serialize(Object)
        VB: Serialize(Object)
      nameWithType:
        CSharp: PowerSerializer.Serialize(Object)
        VB: PowerSerializer.Serialize(Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize(System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: Serialize
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 38
      summary: "\nSerializes an object to a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual byte[] Serialize(object obj)
          VB: Public Overridable Function Serialize(obj As Object) As Byte()
        parameters:
        - id: obj
          type: System.Object
          description: The object to serialize.
        return:
          type: System.Byte[]
          description: A byte-based representation of the object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
      language: CSharp
      name:
        CSharp: Deserialize(Byte[])
        VB: Deserialize(Byte())
      nameWithType:
        CSharp: PowerSerializer.Deserialize(Byte[])
        VB: PowerSerializer.Deserialize(Byte())
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte[])
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(System.Byte())
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: Deserialize
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 106
      summary: "\nDeserializes an object from a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual object Deserialize(byte[] data)
          VB: Public Overridable Function Deserialize(data As Byte()) As Object
        parameters:
        - id: data
          type: System.Byte[]
          description: The byte-based representation of the object.
        return:
          type: System.Object
          description: The deserialized object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize``1(System.Byte[])
      language: CSharp
      name:
        CSharp: Deserialize<T>(Byte[])
        VB: Deserialize(Of T)(Byte())
      nameWithType:
        CSharp: PowerSerializer.Deserialize<T>(Byte[])
        VB: PowerSerializer.Deserialize(Of T)(Byte())
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize<T>(System.Byte[])
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize(Of T)(System.Byte())
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: Deserialize
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 147
      summary: "\nDeserializes an object from a byte array.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual T Deserialize<T>(byte[] data)
          VB: Public Overridable Function Deserialize(Of T)(data As Byte()) As T
        parameters:
        - id: data
          type: System.Byte[]
          description: The byte-based representation of the object.
        typeParameters:
        - id: T
          description: The type of the deserialized object.
        return:
          type: '{T}'
          description: The deserialized object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize*
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
      language: CSharp
      name:
        CSharp: CreateSerializationContext()
        VB: CreateSerializationContext()
      nameWithType:
        CSharp: PowerSerializer.CreateSerializationContext()
        VB: PowerSerializer.CreateSerializationContext()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext()
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext()
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: CreateSerializationContext
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 156
      summary: "\nCreates a new serialization context for storing data about a serialization operation.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual PowerSerializationContext CreateSerializationContext()
          VB: Protected Overridable Function CreateSerializationContext As PowerSerializationContext
        return:
          type: DouglasDwyer.PowerSerializer.PowerSerializationContext
          description: The new serialization context.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
      language: CSharp
      name:
        CSharp: CreateDeserializationContext()
        VB: CreateDeserializationContext()
      nameWithType:
        CSharp: PowerSerializer.CreateDeserializationContext()
        VB: PowerSerializer.CreateDeserializationContext()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext()
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext()
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: CreateDeserializationContext
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 165
      summary: "\nCreates a new deserialization context for storing data about a deserialization operation.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual PowerDeserializationContext CreateDeserializationContext()
          VB: Protected Overridable Function CreateDeserializationContext As PowerDeserializationContext
        return:
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
          description: ''
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
      language: CSharp
      name:
        CSharp: ProcessObjectGraph(PowerDeserializationContext)
        VB: ProcessObjectGraph(PowerDeserializationContext)
      nameWithType:
        CSharp: PowerSerializer.ProcessObjectGraph(PowerDeserializationContext)
        VB: PowerSerializer.ProcessObjectGraph(PowerDeserializationContext)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph(DouglasDwyer.PowerSerializer.PowerDeserializationContext)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ProcessObjectGraph
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 175
      summary: "\nProcesses the generated object graph, makes any last-minute changes if necessary, and returns the deserialized object.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual object ProcessObjectGraph(PowerDeserializationContext context)
          VB: Protected Overridable Function ProcessObjectGraph(context As PowerDeserializationContext) As Object
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
          description: The current deserialization context.
        return:
          type: System.Object
          description: The final deserialized object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object,System.Type)
      language: CSharp
      name:
        CSharp: SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
        VB: SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
      nameWithType:
        CSharp: PowerSerializer.SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
        VB: PowerSerializer.SerializeObject(PowerSerializationContext, BinaryWriter, Object, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object, System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: SerializeObject
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 187
      summary: "\nSerializes the given object, writing its object references and primitive data to the given binary writer. Referenced objects are not serialized, but are added to the object graph.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void SerializeObject(PowerSerializationContext context, BinaryWriter writer, object obj, Type type)
          VB: Protected Overridable Sub SerializeObject(context As PowerSerializationContext, writer As BinaryWriter, obj As Object, type As Type)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerSerializationContext
          description: The current serialization context, with data about the current object graph and known types.
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: obj
          type: System.Object
          description: The object that should be serialized.
        - id: type
          type: System.Type
          description: The type of the current object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext,System.IO.BinaryWriter,System.Object)
      language: CSharp
      name:
        CSharp: WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
        VB: WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
      nameWithType:
        CSharp: PowerSerializer.WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
        VB: PowerSerializer.WriteObjectReference(PowerSerializationContext, BinaryWriter, Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference(DouglasDwyer.PowerSerializer.PowerSerializationContext, System.IO.BinaryWriter, System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: WriteObjectReference
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 258
      summary: "\nWrites an object reference to the given binary writer. If the object has not been referenced before, its type is also stored, along with any immutable type data (like the contents of a string).\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void WriteObjectReference(PowerSerializationContext context, BinaryWriter writer, object obj)
          VB: Protected Overridable Sub WriteObjectReference(context As PowerSerializationContext, writer As BinaryWriter, obj As Object)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerSerializationContext
          description: The current serialization context, with data about the current object graph and known types.
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: obj
          type: System.Object
          description: The object being referenced.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Object,System.Type)
      language: CSharp
      name:
        CSharp: DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
        VB: DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
      nameWithType:
        CSharp: PowerSerializer.DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
        VB: PowerSerializer.DeserializeObject(PowerDeserializationContext, BinaryReader, Object, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Object, System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Object, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: DeserializeObject
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 307
      summary: "\nDeserializes the given object, populating its fields by reading its object references and primitive data from the given binary reader.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void DeserializeObject(PowerDeserializationContext context, BinaryReader reader, object obj, Type type)
          VB: Protected Overridable Sub DeserializeObject(context As PowerDeserializationContext, reader As BinaryReader, obj As Object, type As Type)
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
          description: The current deserialization context, with data about the current object graph and known types.
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader to utilize.
        - id: obj
          type: System.Object
          description: The object whose fields should be populated.
        - id: type
          type: System.Type
          description: The type of the deserialized object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader)
      language: CSharp
      name:
        CSharp: ReadObjectReference(PowerDeserializationContext, BinaryReader)
        VB: ReadObjectReference(PowerDeserializationContext, BinaryReader)
      nameWithType:
        CSharp: PowerSerializer.ReadObjectReference(PowerDeserializationContext, BinaryReader)
        VB: PowerSerializer.ReadObjectReference(PowerDeserializationContext, BinaryReader)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadObjectReference
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 368
      summary: "\nReads an object reference from the given binary reader. If the object has not been referenced before, a new object of the specified type is instantiated.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual object ReadObjectReference(PowerDeserializationContext context, BinaryReader reader)
          VB: Protected Overridable Function ReadObjectReference(context As PowerDeserializationContext, reader As BinaryReader) As Object
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
          description: The current deserialization context, with data about the current object graph and known types.
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader to utilize.
        return:
          type: System.Object
          description: The referenced object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext,System.IO.BinaryReader,System.Type)
      language: CSharp
      name:
        CSharp: ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
        VB: ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
      nameWithType:
        CSharp: PowerSerializer.ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
        VB: PowerSerializer.ReadAndCreateObject(PowerDeserializationContext, BinaryReader, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject(DouglasDwyer.PowerSerializer.PowerDeserializationContext, System.IO.BinaryReader, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadAndCreateObject
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 392
      summary: "\nReads an object&apos;s data from the specified binary reader and creates a new instance of that object with the given data. For user-defined types, a new object of the specified type is returned without any fields initialized. For arrays, a new object with the correct rank lengths is returned. For strings and primitives, an object with the correct value is returned.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual object ReadAndCreateObject(PowerDeserializationContext context, BinaryReader reader, Type type)
          VB: Protected Overridable Function ReadAndCreateObject(context As PowerDeserializationContext, reader As BinaryReader, type As Type) As Object
        parameters:
        - id: context
          type: DouglasDwyer.PowerSerializer.PowerDeserializationContext
          description: The current deserialization context, with data about the current object graph and known types.
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader to utilize.
        - id: type
          type: System.Type
          description: The type of the object to create.
        return:
          type: System.Object
          description: The created object.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter,System.Object)
      language: CSharp
      name:
        CSharp: WritePrimitiveObject(BinaryWriter, Object)
        VB: WritePrimitiveObject(BinaryWriter, Object)
      nameWithType:
        CSharp: PowerSerializer.WritePrimitiveObject(BinaryWriter, Object)
        VB: PowerSerializer.WritePrimitiveObject(BinaryWriter, Object)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter, System.Object)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject(System.IO.BinaryWriter, System.Object)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: WritePrimitiveObject
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 529
      summary: "\nWrites the value of a primitive object to the writer.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void WritePrimitiveObject(BinaryWriter writer, object primitive)
          VB: Protected Overridable Sub WritePrimitiveObject(writer As BinaryWriter, primitive As Object)
        parameters:
        - id: writer
          type: System.IO.BinaryWriter
          description: The binary writer to utilize.
        - id: primitive
          type: System.Object
          description: The object to write.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader,System.Type)
      language: CSharp
      name:
        CSharp: ReadPrimitiveObject(BinaryReader, Type)
        VB: ReadPrimitiveObject(BinaryReader, Type)
      nameWithType:
        CSharp: PowerSerializer.ReadPrimitiveObject(BinaryReader, Type)
        VB: PowerSerializer.ReadPrimitiveObject(BinaryReader, Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader, System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject(System.IO.BinaryReader, System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: ReadPrimitiveObject
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 603
      summary: "\nReads the value of a primitive object from the reader.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual object ReadPrimitiveObject(BinaryReader reader, Type type)
          VB: Protected Overridable Function ReadPrimitiveObject(reader As BinaryReader, type As Type) As Object
        parameters:
        - id: reader
          type: System.IO.BinaryReader
          description: The binary reader to utilize.
        - id: type
          type: System.Type
          description: The type of the primitive to read.
        return:
          type: System.Object
          description: The primitive value.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
      language: CSharp
      name:
        CSharp: CheckTypeAllowance(Type)
        VB: CheckTypeAllowance(Type)
      nameWithType:
        CSharp: PowerSerializer.CheckTypeAllowance(Type)
        VB: PowerSerializer.CheckTypeAllowance(Type)
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance(System.Type)
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: CheckTypeAllowance
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 689
      summary: "\nChecks whether serialization of a type is allowed under the current type resovler, and throws an exception if serialization is forbidden.\n"
      example: []
      syntax:
        content:
          CSharp: protected virtual void CheckTypeAllowance(Type type)
          VB: Protected Overridable Sub CheckTypeAllowance(type As Type)
        parameters:
        - id: type
          type: System.Type
          description: The type to check.
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance*
      modifiers:
        CSharp:
        - protected
        - virtual
        VB:
        - Protected
        - Overridable
    - id: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
      commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.Clone
      language: CSharp
      name:
        CSharp: Clone()
        VB: Clone()
      nameWithType:
        CSharp: PowerSerializer.Clone()
        VB: PowerSerializer.Clone()
      qualifiedName:
        CSharp: DouglasDwyer.PowerSerializer.PowerSerializer.Clone()
        VB: DouglasDwyer.PowerSerializer.PowerSerializer.Clone()
      type: Method
      assemblies:
      - DouglasDwyer.PowerSerializer
      namespace: DouglasDwyer.PowerSerializer
      source:
        remote:
          path: PowerSerializer/PowerSerializer.cs
          branch: main
          repo: https://github.com/DouglasDwyer/PowerSerializer.git
        id: Clone
        path: ../PowerSerializer/PowerSerializer.cs
        startLine: 701
      summary: "\nCreates a memberwise copy of this object, returning a <xref href=\"DouglasDwyer.PowerSerializer.PowerSerializer\" data-throw-if-not-resolved=\"false\"></xref> with the same settings as the original.\n"
      example: []
      syntax:
        content:
          CSharp: public virtual object Clone()
          VB: Public Overridable Function Clone As Object
        return:
          type: System.Object
          description: ''
      overload: DouglasDwyer.PowerSerializer.PowerSerializer.Clone*
      implements:
      - System.ICloneable.Clone
      modifiers:
        CSharp:
        - public
        - virtual
        VB:
        - Public
        - Overridable
      references:
        DouglasDwyer.PowerSerializer.PowerSerializer: 
    references:
      DouglasDwyer.PowerSerializer.PowerSerializer: 
references:
  DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
        name: FinalizerLimitedGuidTypeResolver
        nameWithType: FinalizerLimitedGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
        name: FinalizerLimitedGuidTypeResolver
        nameWithType: FinalizerLimitedGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
    isDefinition: true
    commentId: T:DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver
  DouglasDwyer.PowerSerializer:
    name:
      CSharp:
      - name: DouglasDwyer.PowerSerializer
        nameWithType: DouglasDwyer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer
      VB:
      - name: DouglasDwyer.PowerSerializer
        nameWithType: DouglasDwyer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer
    isDefinition: true
    commentId: N:DouglasDwyer.PowerSerializer
  DouglasDwyer.PowerSerializer.GuidTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver
        name: GuidTypeResolver
        nameWithType: GuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver
        name: GuidTypeResolver
        nameWithType: GuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.GuidTypeResolver
  DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: GuidTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: GuidTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.GuidTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable(System.Type)
  DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: GuidTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: GuidTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.GuidTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
  DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: GuidTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: GuidTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.GuidTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID(System.IO.BinaryReader)
  DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
        name: GetTypeName
        nameWithType: GuidTypeResolver.GetTypeName
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
        name: GetTypeName
        nameWithType: GuidTypeResolver.GetTypeName
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.GuidTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName(System.Type)
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  DouglasDwyer.PowerSerializer.ITypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver
        name: ITypeResolver
        nameWithType: ITypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver
        name: ITypeResolver
        nameWithType: ITypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.ITypeResolver
  DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
        name: ClassLimitedTypeResolver
        nameWithType: ClassLimitedTypeResolver.ClassLimitedTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor*
        name: ClassLimitedTypeResolver
        nameWithType: ClassLimitedTypeResolver.ClassLimitedTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.ClassLimitedTypeResolver
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver.#ctor
  System.Reflection.Assembly[]:
    name:
      CSharp:
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{System.Reflection.Assembly}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Reflection.Assembly
        name: Assembly
        nameWithType: Assembly
        qualifiedName: System.Reflection.Assembly
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
  System.Type[]:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.Generic.IEnumerable{System.Type}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
        name: ClassLimitedTypeResolver
        nameWithType: ClassLimitedTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
        name: ClassLimitedTypeResolver
        nameWithType: ClassLimitedTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
    isDefinition: true
    commentId: T:DouglasDwyer.PowerSerializer.ClassLimitedTypeResolver
  System.AppDomain:
    commentId: T:System.AppDomain
  DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor*
        name: FinalizerLimitedGuidTypeResolver
        nameWithType: FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor*
        name: FinalizerLimitedGuidTypeResolver
        nameWithType: FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.FinalizerLimitedGuidTypeResolver
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.FinalizerLimitedGuidTypeResolver.#ctor
  DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
        name: FinalizerLimitedNameTypeResolver
        nameWithType: FinalizerLimitedNameTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
        name: FinalizerLimitedNameTypeResolver
        nameWithType: FinalizerLimitedNameTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
    isDefinition: true
    commentId: T:DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver
  DouglasDwyer.PowerSerializer.NameTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver
        name: NameTypeResolver
        nameWithType: NameTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver
        name: NameTypeResolver
        nameWithType: NameTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.NameTypeResolver
  DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: NameTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: NameTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.NameTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID(System.IO.BinaryReader)
  DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: NameTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: NameTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.NameTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: NameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: NameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.NameTypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable(System.Type)
  DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: FinalizerLimitedNameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable
      VB:
      - id: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: FinalizerLimitedNameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.FinalizerLimitedNameTypeResolver.IsTypeSerializable
  DouglasDwyer.PowerSerializer.FullGuidTypeResolver:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
        name: FullGuidTypeResolver
        nameWithType: FullGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
        name: FullGuidTypeResolver
        nameWithType: FullGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FullGuidTypeResolver
    isDefinition: true
    commentId: T:DouglasDwyer.PowerSerializer.FullGuidTypeResolver
  DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor*
        name: FullGuidTypeResolver
        nameWithType: FullGuidTypeResolver.FullGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.FullGuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor*
        name: FullGuidTypeResolver
        nameWithType: FullGuidTypeResolver.FullGuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.FullGuidTypeResolver.FullGuidTypeResolver
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.FullGuidTypeResolver.#ctor
  System.ObsoleteAttribute:
    name:
      CSharp:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
      VB:
      - id: System.ObsoleteAttribute
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ObsoleteAttribute
  System.ObsoleteAttribute.#ctor(System.String,System.Boolean):
    name:
      CSharp:
      - id: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
        name: ObsoleteAttribute
        nameWithType: ObsoleteAttribute.ObsoleteAttribute
        qualifiedName: System.ObsoleteAttribute.ObsoleteAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ObsoleteAttribute
    commentId: M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor*
        name: GuidTypeResolver
        nameWithType: GuidTypeResolver.GuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GuidTypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor*
        name: GuidTypeResolver
        nameWithType: GuidTypeResolver.GuidTypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GuidTypeResolver
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.GuidTypeResolver.#ctor
  DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: GuidTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: GuidTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.GuidTypeResolver.IsTypeSerializable
  DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: ITypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
        name: IsTypeSerializable
        nameWithType: ITypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.ITypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable(System.Type)
  System.IO:
    name:
      CSharp:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
        isExternal: true
      VB:
      - name: System.IO
        nameWithType: System.IO
        qualifiedName: System.IO
    isDefinition: true
    commentId: N:System.IO
  System.IO.BinaryWriter:
    name:
      CSharp:
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      VB:
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.BinaryWriter
  DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: GuidTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: GuidTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.GuidTypeResolver.WriteTypeID
  DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: ITypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
        name: WriteTypeID
        nameWithType: ITypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryWriter
        name: BinaryWriter
        nameWithType: BinaryWriter
        qualifiedName: System.IO.BinaryWriter
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.ITypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID(System.IO.BinaryWriter,System.Type)
  System.IO.BinaryReader:
    name:
      CSharp:
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      VB:
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
    isDefinition: true
    parent: System.IO
    commentId: T:System.IO.BinaryReader
  DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: GuidTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: GuidTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.GuidTypeResolver.ReadTypeID
  DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader):
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: ITypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
        name: ReadTypeID
        nameWithType: ITypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.IO.BinaryReader
        name: BinaryReader
        nameWithType: BinaryReader
        qualifiedName: System.IO.BinaryReader
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer.ITypeResolver
    commentId: M:DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID(System.IO.BinaryReader)
  DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName*
        name: GetTypeName
        nameWithType: GuidTypeResolver.GetTypeName
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName
      VB:
      - id: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName*
        name: GetTypeName
        nameWithType: GuidTypeResolver.GetTypeName
        qualifiedName: DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.GuidTypeResolver.GetTypeName
  DouglasDwyer.PowerSerializer.PowerSerializer:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer
        name: PowerSerializer
        nameWithType: PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer
        name: PowerSerializer
        nameWithType: PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer
    isDefinition: true
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializer
  DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: ITypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: ITypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.ITypeResolver.IsTypeSerializable
  DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: ITypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: ITypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.ITypeResolver.WriteTypeID
  DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: ITypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: ITypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.ITypeResolver.ReadTypeID
  DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: NameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable*
        name: IsTypeSerializable
        nameWithType: NameTypeResolver.IsTypeSerializable
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.NameTypeResolver.IsTypeSerializable
  DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: NameTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID*
        name: ReadTypeID
        nameWithType: NameTypeResolver.ReadTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.NameTypeResolver.ReadTypeID
  DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: NameTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID*
        name: WriteTypeID
        nameWithType: NameTypeResolver.WriteTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.NameTypeResolver.WriteTypeID
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext:
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
  System.Collections.Generic.IList`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IList`1
  System.Collections.Generic.IList{System.Object}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{System.Object}
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph*
        name: ObjectGraph
        nameWithType: PowerDeserializationContext.ObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph*
        name: ObjectGraph
        nameWithType: PowerDeserializationContext.ObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.ObjectGraph
  System.Collections.Generic.IList{System.Type}:
    name:
      CSharp:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IList`1
        name: IList
        nameWithType: IList
        qualifiedName: System.Collections.Generic.IList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IList`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IList{System.Type}
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes*
        name: IncludedTypes
        nameWithType: PowerDeserializationContext.IncludedTypes
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes*
        name: IncludedTypes
        nameWithType: PowerDeserializationContext.IncludedTypes
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.IncludedTypes
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor*
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext.PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.PowerDeserializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor*
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext.PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.PowerDeserializationContext
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.#ctor
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID*
        name: GetTypeFromID
        nameWithType: PowerDeserializationContext.GetTypeFromID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID*
        name: GetTypeFromID
        nameWithType: PowerDeserializationContext.GetTypeFromID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetTypeFromID
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject*
        name: HasObject
        nameWithType: PowerDeserializationContext.HasObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject*
        name: HasObject
        nameWithType: PowerDeserializationContext.HasObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.HasObject
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject*
        name: GetObject
        nameWithType: PowerDeserializationContext.GetObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject*
        name: GetObject
        nameWithType: PowerDeserializationContext.GetObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.GetObject
  DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject*
        name: RegisterNextObject
        nameWithType: PowerDeserializationContext.RegisterNextObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject*
        name: RegisterNextObject
        nameWithType: PowerDeserializationContext.RegisterNextObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerDeserializationContext.RegisterNextObject
  DouglasDwyer.PowerSerializer.PowerDeserializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerDeserializationContext
        name: PowerDeserializationContext
        nameWithType: PowerDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerDeserializationContext
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerDeserializationContext
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext:
    commentId: M:DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
  DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph*
        name: ObjectGraph
        nameWithType: PowerSerializationContext.ObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph*
        name: ObjectGraph
        nameWithType: PowerSerializationContext.ObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.ObjectGraph
  System.Collections.Immutable.ImmutableList`1:
    name:
      CSharp:
      - id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList
        nameWithType: ImmutableList
        qualifiedName: System.Collections.Immutable.ImmutableList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList
        nameWithType: ImmutableList
        qualifiedName: System.Collections.Immutable.ImmutableList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Immutable.ImmutableList`1
  System.Collections.Immutable:
    name:
      CSharp:
      - name: System.Collections.Immutable
        nameWithType: System.Collections.Immutable
        qualifiedName: System.Collections.Immutable
        isExternal: true
      VB:
      - name: System.Collections.Immutable
        nameWithType: System.Collections.Immutable
        qualifiedName: System.Collections.Immutable
    isDefinition: true
    commentId: N:System.Collections.Immutable
  System.Collections.Immutable.ImmutableList{System.Type}:
    name:
      CSharp:
      - id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList
        nameWithType: ImmutableList
        qualifiedName: System.Collections.Immutable.ImmutableList
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Immutable.ImmutableList`1
        name: ImmutableList
        nameWithType: ImmutableList
        qualifiedName: System.Collections.Immutable.ImmutableList
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Immutable.ImmutableList`1
    parent: System.Collections.Immutable
    commentId: T:System.Collections.Immutable.ImmutableList{System.Type}
  DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes*
        name: IncludedTypes
        nameWithType: PowerSerializationContext.IncludedTypes
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes*
        name: IncludedTypes
        nameWithType: PowerSerializationContext.IncludedTypes
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.IncludedTypes
  DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor*
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext.PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.PowerSerializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor*
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext.PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.PowerSerializationContext
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.#ctor
  DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject*
        name: HasObject
        nameWithType: PowerSerializationContext.HasObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject*
        name: HasObject
        nameWithType: PowerSerializationContext.HasObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.HasObject
  DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID*
        name: GetObjectID
        nameWithType: PowerSerializationContext.GetObjectID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID*
        name: GetObjectID
        nameWithType: PowerSerializationContext.GetObjectID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.GetObjectID
  System.ValueTuple{System.UInt16,System.Type}:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System
    commentId: T:System.ValueTuple{System.UInt16,System.Type}
  DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject*
        name: RegisterObject
        nameWithType: PowerSerializationContext.RegisterObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject*
        name: RegisterObject
        nameWithType: PowerSerializationContext.RegisterObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.RegisterObject
  DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID*
        name: GetTypeID
        nameWithType: PowerSerializationContext.GetTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID*
        name: GetTypeID
        nameWithType: PowerSerializationContext.GetTypeID
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializationContext.GetTypeID
  DouglasDwyer.PowerSerializer.PowerSerializationContext:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializationContext
        name: PowerSerializationContext
        nameWithType: PowerSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializationContext
    isDefinition: true
    parent: DouglasDwyer.PowerSerializer
    commentId: T:DouglasDwyer.PowerSerializer.PowerSerializationContext
  System.ICloneable:
    name:
      CSharp:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
      VB:
      - id: System.ICloneable
        name: ICloneable
        nameWithType: ICloneable
        qualifiedName: System.ICloneable
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ICloneable
  DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver*
        name: TypeResolver
        nameWithType: PowerSerializer.TypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver*
        name: TypeResolver
        nameWithType: PowerSerializer.TypeResolver
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.TypeResolver
  DouglasDwyer.PowerSerializer.PowerSerializer.#ctor*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor*
        name: PowerSerializer
        nameWithType: PowerSerializer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.#ctor*
        name: PowerSerializer
        nameWithType: PowerSerializer.PowerSerializer
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.PowerSerializer
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.#ctor
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  DouglasDwyer.PowerSerializer.PowerSerializer.Serialize*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize*
        name: Serialize
        nameWithType: PowerSerializer.Serialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize*
        name: Serialize
        nameWithType: PowerSerializer.Serialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Serialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.Serialize
  DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize*
        name: Deserialize
        nameWithType: PowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize*
        name: Deserialize
        nameWithType: PowerSerializer.Deserialize
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.Deserialize
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
    commentId: '!:T'
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext*
        name: CreateSerializationContext
        nameWithType: PowerSerializer.CreateSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext*
        name: CreateSerializationContext
        nameWithType: PowerSerializer.CreateSerializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.CreateSerializationContext
  DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext*
        name: CreateDeserializationContext
        nameWithType: PowerSerializer.CreateDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext*
        name: CreateDeserializationContext
        nameWithType: PowerSerializer.CreateDeserializationContext
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.CreateDeserializationContext
  DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph*
        name: ProcessObjectGraph
        nameWithType: PowerSerializer.ProcessObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph*
        name: ProcessObjectGraph
        nameWithType: PowerSerializer.ProcessObjectGraph
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.ProcessObjectGraph
  DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject*
        name: SerializeObject
        nameWithType: PowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject*
        name: SerializeObject
        nameWithType: PowerSerializer.SerializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.SerializeObject
  DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference*
        name: WriteObjectReference
        nameWithType: PowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference*
        name: WriteObjectReference
        nameWithType: PowerSerializer.WriteObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.WriteObjectReference
  DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject*
        name: DeserializeObject
        nameWithType: PowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject*
        name: DeserializeObject
        nameWithType: PowerSerializer.DeserializeObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.DeserializeObject
  DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference*
        name: ReadObjectReference
        nameWithType: PowerSerializer.ReadObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference*
        name: ReadObjectReference
        nameWithType: PowerSerializer.ReadObjectReference
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.ReadObjectReference
  DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject*
        name: ReadAndCreateObject
        nameWithType: PowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject*
        name: ReadAndCreateObject
        nameWithType: PowerSerializer.ReadAndCreateObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.ReadAndCreateObject
  DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject*
        name: WritePrimitiveObject
        nameWithType: PowerSerializer.WritePrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject*
        name: WritePrimitiveObject
        nameWithType: PowerSerializer.WritePrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.WritePrimitiveObject
  DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject*
        name: ReadPrimitiveObject
        nameWithType: PowerSerializer.ReadPrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject*
        name: ReadPrimitiveObject
        nameWithType: PowerSerializer.ReadPrimitiveObject
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.ReadPrimitiveObject
  DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance*
        name: CheckTypeAllowance
        nameWithType: PowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance*
        name: CheckTypeAllowance
        nameWithType: PowerSerializer.CheckTypeAllowance
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.CheckTypeAllowance
  DouglasDwyer.PowerSerializer.PowerSerializer.Clone*:
    name:
      CSharp:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Clone*
        name: Clone
        nameWithType: PowerSerializer.Clone
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
      VB:
      - id: DouglasDwyer.PowerSerializer.PowerSerializer.Clone*
        name: Clone
        nameWithType: PowerSerializer.Clone
        qualifiedName: DouglasDwyer.PowerSerializer.PowerSerializer.Clone
    isDefinition: true
    commentId: Overload:DouglasDwyer.PowerSerializer.PowerSerializer.Clone
  System.ICloneable.Clone:
    name:
      CSharp:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ICloneable.Clone
        name: Clone
        nameWithType: ICloneable.Clone
        qualifiedName: System.ICloneable.Clone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ICloneable
    commentId: M:System.ICloneable.Clone
